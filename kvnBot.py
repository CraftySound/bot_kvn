import asyncio
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

TOKEN = "8118913866:AAEVKeud9EPr36gb_A4g_WSrr9QI7nPSD68"

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
questions = [
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞ —Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –ö–í–ù?", "options": ["2001", "2002", "2003", "2003"],
     "correct": 2},
    {"question": "–ö—Ç–æ –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —á–µ–º–ø–∏–æ–Ω–æ–º –ü–µ—Ä–≤–æ–π –õ–∏–≥–∏ –ö–í–ù?", "options": ["–°–±–æ—Ä–Ω–∞—è –ó–∞–±–æ–π–∫–∞–ª—å—Å–∫–æ–≥–æ –∫—Ä–∞—è", "–ï–≤—Ä–∞–∑–∏—è", "–ü–ª—é—à–∫–∏", "–ò–Ω–≥–µ–±–æ—Ä–≥–∞ –î–∞–ø–∫—É–Ω–∞–π—Ç–µ"],
     "correct": 2},
    {"question": "–ö—Ç–æ –¥–æ–ª—å—à–µ –≤—Å–µ—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥—É –ö–í–ù?", "options": ["–í–∞–ª–µ–Ω—Ç–∏–Ω –ò–≤–∞–Ω–æ–≤", "–ú–∏—Ö–∞–∏–ª –ì—É–ª–∏–∫–æ–≤", "–ï–≤–≥–µ–Ω–∏–π –î–æ–Ω—Å–∫–∏—Ö", "–ê–ª–µ–∫—Å–µ–π –õ—è–ø–∏—á–µ–≤"],
     "correct": 1},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ü—Ä–∏–º–∞ —Å—Ç–∞–ª–∞ —á–µ–º–ø–∏–æ–Ω–æ–º –í—ã—Å—à–µ–π –õ–∏–≥–∏ –ö–í–ù?", "options": ["2006", "2007", "2008", "2009"],
     "correct": 3},
    {"question": "–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —à—É—Ç–∫–∞: ‚Äî –Ø ‚Äî —ç—Ç–æ –ª—É—á—à–µ–µ, —á—Ç–æ –±—ã–ª–æ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏. ‚Äî –≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–µ –æ —Ç–≤–æ–∏—Ö –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞—Ö, –∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞—Ö –º–æ–µ–π –∂–∏–∑–Ω–∏.", "options": ["–õ–£–ù–ê", "–ë—É–¥–µ–º –î—Ä—É–∂–∏—Ç—å –°–µ–º—å—è–º–∏", "–°–±–æ—Ä–Ω–∞—è –ú–∞–ª—ã—Ö –ù–∞—Ä–æ–¥–æ–≤", "–ú–µ–≥–∞–ø–æ–ª–∏—Å"],
     "correct": 3},
    {"question": "–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ö–∏–í–∏–ù–æ–≤?", "options": ["–ú–∞–∫—Å–∏–º—É–º", "–†–£–î–ù", "–†—É—Å—Å–∫–∞—è –î–æ—Ä–æ–≥–∞", "–£—Ä–∞–ª—å—Å–∫–∏–µ –ü–µ–ª—å–º–µ–Ω–∏"],
     "correct": 1},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ì–æ–ª–æ—Å—è—â–∏–π –ö–∏–í–∏–ù –ø–µ—Ä–µ–µ—Ö–∞–ª –≤ –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫?", "options": ["2013", "2014", "2015", "2017"],
     "correct": 2},
    {"question": "–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ä—è–¥ –≤—ã–∏–≥—Ä–∞–ª–∞ –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥—É –∏ –í—ã—Å—à—É—é –ª–∏–≥—É –ö–í–ù?", "options": ["–°–û–ö", "–ú–µ–≥–∞–ø–æ–ª–∏—Å", "–ú–∞–∫—Å–∏–º—É–º", "–¢–∞–∫-–¢–æ"],
     "correct": 1},
    {"question": "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –ö–í–ù –ú–æ–Ω–¥–∏?", "options": ["–°—ã–∫—Ç—ã–≤–∫–∞—Ä", "–°–∞—Ä–∞—Ç–æ–≤", "–°–º–æ–ª–µ–Ω—Å–∫", "–ê–ª—É–ø–∫–∞"],
     "correct": 0},
    {"question": "–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ - –ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–∞–Ω–∞—Ç–∞?",
     "options": ["–°–û–ö", "–ú–∞–∫—Å–∏–º—É–º", "–ö–∞–∑–∞—Ö–∏", "–ü–∏—Ä–∞–º–∏–¥–∞"],
     "correct": 3},
    {"question": "–ü–æ –º–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã –ö–í–ù –°—Ç–∞–Ω—Ü–∏—è –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, –∏–º–µ–Ω–Ω–æ –æ–Ω —É–±–∏–π—Ü–∞.",
     "options": ["–°–∞–¥–æ–≤–Ω–∏–∫", "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫", "–ü–æ—á—Ç–∞–ª—å–æ–Ω", "–î–µ—Ç–µ–∫—Ç–∏–≤"],
     "correct": 1},
    {"question": "–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤—ã–º —á–µ–º–ø–∏–æ–Ω–æ–º –≤–æ–∑—Ä–∞–∂–¥—ë–Ω–Ω–æ–≥–æ –ö–í–ù?",
     "options": ["–ù–ì–£", "–ú–ì–£", "–ü–∞—Ä–Ω–∏ –∏–∑ –ë–∞–∫—É", "–û–¥–µ—Å—Å–∫–∏–µ –¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω—ã"],
     "correct": 3},
    {"question": "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –ö–í–ù –≤ 2025 –≥–æ–¥—É?",
     "options": ["62", "63", "64", "65"],
     "correct": 2},
    {"question": "–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤–µ—Ä–Ω—É–ª —Å–≤–æ–∏–º —Ä–µ—à–µ–Ω–∏–µ–º –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –±–∏–∞—Ç–ª–æ–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –≠—Ä–Ω—Å—Ç?",
     "options": ["–ù–∞–ø–æ–ª–µ–æ–Ω—ã", "–†—É—Å—Å–∫–∞—è –î–æ—Ä–æ–≥–∞", "–¢–∞–∫-–¢–æ", "–°–±–æ—Ä–Ω–∞—è –¢–∞—Ç–Ω–µ—Ñ—Ç–∏"],
     "correct": 2},
    {"question": "–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ 2013 –≥–æ–¥—É –Ω–∞–±—Ä–∞–ª–∞ –≤ –∏–≥—Ä–µ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤, –Ω–æ –≤ —Ñ–∏–Ω–∞–ª –≤–∑—è–ª–∏ –¥—Ä—É–≥—É—é?",
     "options": ["–§–∏–∑—Ç–µ—Ö", "–ü–ª–æ—Ö–∞—è –ö–æ–º–ø–∞–Ω–∏—è", "–î–Ω–µ–ø—Ä", "–°–±–æ—Ä–Ω–∞—è –î–∞–≥–µ—Å—Ç–∞–Ω–∞"],
     "correct": 0},
    {"question": "–ó–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –ö–í–ù –∏–≥—Ä–∞–ª–∞ –ü–µ–ª–∞–≥–µ—è?",
     "options": ["–£—Ä–∞–ª—å—Å–∫–∏–µ –ü–µ–ª—å–º–µ–Ω–∏", "–ù–ì–£", "–¢–µ–∞—Ç—Ä –î–ì–£", "–î–µ—Ç–∏ –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç–∞ –®–º–∏–¥—Ç–∞"],
     "correct": 1},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∞—Å–∏–ª—å–µ–≤–∏—á –ú–∞—Å–ª—è–∫–æ–≤ –ø–µ—Ä–µ—Å—Ç–∞–ª –≤–µ—Å—Ç–∏ –í—ã—Å—à—É—é –£–∫—Ä–∞–∏–Ω—Å–∫—É—é –õ–∏–≥—É?",
     "options": ["2010", "2011", "2012", "2013","2014"],
     "correct": 3},
    {"question": "–í –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å –î–º–∏—Ç—Ä–∏–π –ë—É—à—É–µ–≤?",
     "options": ["25-–∞—è", "–í—è—Ç–∫–∞ –ê–≤—Ç–æ–º–∞—Ç", "–°–±–æ—Ä–Ω–∞—è –£–ª—å—è–Ω–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏", "–ú–∞—Ö–∞—á–∫–∞–ª–∏–Ω—Å–∫–∏–µ –ë—Ä–æ–¥—è–≥–∏"], "correct": 1},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è –ö–í–ù?", "options": ["1983", "1984", "1985", "1986"], "correct": 3},
    {"question": "–ö—Ç–æ —Å—Ç–∞–ª —á–µ–º–ø–∏–æ–Ω–æ–º –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∏ –ö–í–ù –≤ 2016 –≥–æ–¥—É?",
     "options": ["–°–±–æ—Ä–Ω–∞—è –ì—Ä—É–∑–∏–∏", "–ù–ê–¢–ï", "–¢–µ–∞—Ç—Ä –£—Ä–∞–ª—å—Å–∫–æ–≥–æ –ó—Ä–∏—Ç–µ–ª—è", "–§–∏–∑—Ç–µ—Ö", "–°–∞—Ä–∞—Ç–æ–≤"], "correct": 1},
]
# –ê–¥–º–∏–Ω ID (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID)
ADMIN_ID = 538226846


async def admin_panel(update: Update, context: CallbackContext) -> None:
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_question")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="edit_question")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="delete_question")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)


async def admin_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    action = query.data
    if action == "add_question":
        await query.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç1, –û—Ç–≤–µ—Ç2, –û—Ç–≤–µ—Ç3, –û—Ç–≤–µ—Ç4 | –ù–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (0-3)")
        context.user_data["admin_action"] = "add"
    elif action == "edit_question":
        await query.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:")
        for i, q in enumerate(questions):
            await query.message.reply_text(f"{i + 1}. {q['question']}")
        await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        context.user_data["admin_action"] = "edit"
    elif action == "delete_question":
        await query.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:")
        for i, q in enumerate(questions):
            await query.message.reply_text(f"{i + 1}. {q['question']}")
        await query.message.reply_text("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        context.user_data["admin_action"] = "delete"

    await query.answer()
# –•—Ä–∞–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
user_progress = {}
user_scores = {}
user_timers = {}
leaderboard = []
user_attempts = {}


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_username = update.effective_user.username or "–ê–Ω–æ–Ω–∏–º"
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    if user_id in user_attempts and current_time - user_attempts[user_id] < 86400:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞!")
        return

    user_attempts[user_id] = current_time
    user_progress[user_id] = 0
    user_scores[user_id] = {"correct": 0, "incorrect": 0, "start_time": current_time, "username": user_username}
    await send_question(update, context, user_id)


async def send_question(update: Update, context: CallbackContext, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    index = user_progress.get(user_id, 0)
    if index >= len(questions):
        await send_results(update, user_id)
        return

    question_data = questions[index]
    keyboard = [[InlineKeyboardButton(opt, callback_data=str(i))] for i, opt in enumerate(question_data["options"])]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await update.effective_message.reply_text(f"‚è≥ {question_data['question']}", reply_markup=reply_markup)
    user_timers[user_id] = asyncio.create_task(answer_timeout(update, context, user_id, msg, question_data))


async def answer_timeout(update: Update, context: CallbackContext, user_id: int, msg, question_data):
    """–¢–∞–π–º–µ—Ä —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º."""
    time_left = 30
    while time_left > 0:
        await asyncio.sleep(1)
        time_left -= 1
        try:
            await msg.edit_text(f"‚è≥ {question_data['question']}\n–û—Å—Ç–∞–ª–æ—Å—å: {time_left} —Å–µ–∫",
                                reply_markup=msg.reply_markup)
        except:
            break

    if user_id in user_progress and user_progress[user_id] < len(questions):
        user_scores[user_id]["incorrect"] += 1
        try:
            await msg.delete()
        except:
            pass

        await update.effective_message.reply_text("‚è≥ –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å—Ç–µ–∫–ª–æ!")
        user_progress[user_id] += 1
        if user_progress[user_id] < len(questions):
            await send_question(update, context, user_id)
        else:
            await send_results(update, user_id)


async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    index = user_progress.get(user_id, 0)

    if index >= len(questions):
        return

    if user_id in user_timers:
        user_timers[user_id].cancel()
        del user_timers[user_id]

    question_data = questions[index]
    selected_option = int(query.data)
    correct_option = question_data["correct"]

    if selected_option == correct_option:
        reply_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        user_scores[user_id]["correct"] += 1
    else:
        reply_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['options'][correct_option]}"
        user_scores[user_id]["incorrect"] += 1

    await query.answer()
    await query.edit_message_text(text=f"{question_data['question']}\n\n{reply_text}")

    user_progress[user_id] += 1

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    await asyncio.sleep(2)

    if user_progress[user_id] < len(questions):
        await send_question(update, context, user_id)
    else:
        await send_results(update, user_id)



async def send_results(update: Update, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    user_username = user_scores[user_id]["username"]
    correct = user_scores[user_id]["correct"]
    incorrect = user_scores[user_id]["incorrect"]
    elapsed_time = time.time() - user_scores[user_id]["start_time"]

    leaderboard.append({"username": user_username, "score": correct, "time": elapsed_time})
    leaderboard.sort(key=lambda x: (-x["score"], x["time"]))
    top_10 = leaderboard[:10]
    total_users = len(set(user["username"] for user in leaderboard))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    leaderboard_text = "\n".join(
        [f"{i + 1}. {user['username']} - {user['score']} –±–∞–ª–ª–æ–≤ ({user['time']:.2f} —Å–µ–∫)" for i, user in
         enumerate(top_10)])

    result_text = (
        f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\nüë§ –õ–æ–≥–∏–Ω: {user_username}\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}\n"
        f"‚è≥ –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫\n\nüèÜ –¢–û–ü-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{leaderboard_text}\n\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç: {total_users}")

    await update.effective_message.reply_text(result_text)


async def view_leaderboard(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    leaderboard.sort(key=lambda x: (-x["score"], x["time"]))
    top_10 = leaderboard[:10]
    total_users = len(set(user["username"] for user in leaderboard))

    leaderboard_text = "\n".join(
        [f"{i + 1}. {user['username']} - {user['score']} –±–∞–ª–ª–æ–≤ ({user['time']:.2f} —Å–µ–∫)" for i, user in
         enumerate(top_10)])

    result_text = f"üèÜ –¢–û–ü-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{leaderboard_text}\n\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç: {total_users}"

    await update.message.reply_text(result_text)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(CommandHandler("top10", view_leaderboard))
    app.add_handler(CallbackQueryHandler(button_handler))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: callback_router –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ button_handler
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
