import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

TOKEN = "8118913866:AAH4rioUioiN37NjvaowIjJUQq0Sdi_NpGY"

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
questions = [
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ü—Ä–∏–º–∞ —Å—Ç–∞–ª–∞ —á–µ–º–ø–∏–æ–Ω–æ–º –í—ã—Å—à–µ–π –õ–∏–≥–∏ –ö–í–ù?", "options": ["2006", "2007", "2008", "2009"],
     "correct": 3},
    {"question": "–í –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å –î–º–∏—Ç—Ä–∏–π –ë—É—à—É–µ–≤",
     "options": ["25-–∞—è", "–í—è—Ç–∫–∞ –ê–≤—Ç–æ–º–∞—Ç", "–°–±–æ—Ä–Ω–∞—è –£–ª—å—è–Ω–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"], "correct": 1},
]

# –•—Ä–∞–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
user_progress = {}
user_scores = {}
user_timers = {}


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_progress[user_id] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    user_scores[user_id] = {"correct": 0, "incorrect": 0}  # –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç

    await send_question(update, context, user_id)


async def send_question(update: Update, context: CallbackContext, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    index = user_progress.get(user_id, 0)

    if index >= len(questions):  # –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω
        correct = user_scores[user_id]["correct"]
        incorrect = user_scores[user_id]["incorrect"]
        result_text = f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}"

        if update.message:
            await update.message.reply_text(result_text)
        elif update.callback_query:
            await update.callback_query.message.reply_text(result_text)

        return

    question_data = questions[index]
    keyboard = [[InlineKeyboardButton(opt, callback_data=str(i))] for i, opt in enumerate(question_data["options"])]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        msg = await update.message.reply_text(f"‚è≥ {question_data['question']}\n–û—Å—Ç–∞–ª–æ—Å—å: 30 —Å–µ–∫—É–Ω–¥", reply_markup=reply_markup)
    elif update.callback_query:
        msg = await update.callback_query.message.reply_text(f"‚è≥ {question_data['question']}\n–û—Å—Ç–∞–ª–æ—Å—å: 30 —Å–µ–∫—É–Ω–¥", reply_markup=reply_markup)

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º (1 —Å–µ–∫)
    if user_id in user_timers:
        user_timers[user_id].cancel()  # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä

    user_timers[user_id] = asyncio.create_task(answer_timeout(update, context, user_id, msg, question_data))


async def answer_timeout(update: Update, context: CallbackContext, user_id: int, msg, question_data):
    """–¢–∞–π–º–µ—Ä —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º. –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."""
    time_left = 30
    while time_left > 0:
        await asyncio.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        time_left -= 1
        try:
            await msg.edit_text(f"‚è≥ {question_data['question']}\n–û—Å—Ç–∞–ª–æ—Å—å: {time_left} —Å–µ–∫—É–Ω–¥", reply_markup=msg.reply_markup)
        except:
            break  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª - –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if user_id in user_progress and user_progress[user_id] < len(questions):
        user_scores[user_id]["incorrect"] += 1  # –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await msg.reply_text("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        user_progress[user_id] += 1
        await send_question(update, context, user_id)


async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    index = user_progress.get(user_id, 0)

    if index >= len(questions):
        return

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω
    if user_id in user_timers:
        user_timers[user_id].cancel()
        del user_timers[user_id]

    question_data = questions[index]
    selected_option = int(query.data)
    correct_option = question_data["correct"]

    if selected_option == correct_option:
        reply_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        user_scores[user_id]["correct"] += 1
    else:
        reply_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['options'][correct_option]}"
        user_scores[user_id]["incorrect"] += 1

    await query.answer()
    await query.edit_message_text(text=f"{question_data['question']}\n\n{reply_text}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_progress[user_id] += 1
    if user_progress[user_id] < len(questions):
        await send_question(update, context, user_id)
    else:
        correct = user_scores[user_id]["correct"]
        incorrect = user_scores[user_id]["incorrect"]
        result_text = f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}"
        await query.message.reply_text(result_text)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
