import asyncio
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

TOKEN = "8118913866:AAF07G86rNkFUDFpybZJYhVbu3v74uEqa0k"

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
questions = [
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ü—Ä–∏–º–∞ —Å—Ç–∞–ª–∞ —á–µ–º–ø–∏–æ–Ω–æ–º –í—ã—Å—à–µ–π –õ–∏–≥–∏ –ö–í–ù?", "options": ["2006", "2007", "2008", "2009"],
     "correct": 3},
    {"question": "–í –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å –î–º–∏—Ç—Ä–∏–π –ë—É—à—É–µ–≤?",
     "options": ["25-–∞—è", "–í—è—Ç–∫–∞ –ê–≤—Ç–æ–º–∞—Ç", "–°–±–æ—Ä–Ω–∞—è –£–ª—å—è–Ω–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"], "correct": 1},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è –ö–í–ù?", "options": ["1983", "1984", "1985", "1986"], "correct": 3},
    {"question": "–ö—Ç–æ —Å—Ç–∞–ª —á–µ–º–ø–∏–æ–Ω–æ–º –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∏ –ö–í–ù –≤ 2016 –≥–æ–¥—É?",
     "options": ["–°–±–æ—Ä–Ω–∞—è –ì—Ä—É–∑–∏–∏", "–ù–ê–¢–ï", "–¢–µ–∞—Ç—Ä –£—Ä–∞–ª—å—Å–∫–æ–≥–æ –ó—Ä–∏—Ç–µ–ª—è", "–§–∏–∑—Ç–µ—Ö", "–°–∞—Ä–∞—Ç–æ–≤"], "correct": 1},
]

# –•—Ä–∞–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
user_progress = {}
user_scores = {}
user_timers = {}
leaderboard = []
user_attempts = {}


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_username = update.effective_user.username or "–ê–Ω–æ–Ω–∏–º"
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    if user_id in user_attempts and current_time - user_attempts[user_id] < 86400:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞!")
        return

    user_attempts[user_id] = current_time
    user_progress[user_id] = 0
    user_scores[user_id] = {"correct": 0, "incorrect": 0, "start_time": current_time, "username": user_username}
    await send_question(update, context, user_id)


async def send_question(update: Update, context: CallbackContext, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    index = user_progress.get(user_id, 0)
    if index >= len(questions):
        await send_results(update, user_id)
        return

    question_data = questions[index]
    keyboard = [[InlineKeyboardButton(opt, callback_data=str(i))] for i, opt in enumerate(question_data["options"])]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await update.effective_message.reply_text(f"‚è≥ {question_data['question']}", reply_markup=reply_markup)
    user_timers[user_id] = asyncio.create_task(answer_timeout(update, context, user_id, msg, question_data))


async def answer_timeout(update: Update, context: CallbackContext, user_id: int, msg, question_data):
    """–¢–∞–π–º–µ—Ä —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º."""
    time_left = 30
    while time_left > 0:
        await asyncio.sleep(1)
        time_left -= 1
        try:
            await msg.edit_text(f"‚è≥ {question_data['question']}\n–û—Å—Ç–∞–ª–æ—Å—å: {time_left} —Å–µ–∫",
                                reply_markup=msg.reply_markup)
        except:
            break

    if user_id in user_progress and user_progress[user_id] < len(questions):
        user_scores[user_id]["incorrect"] += 1
        try:
            await msg.delete()
        except:
            pass

        await update.effective_message.reply_text("‚è≥ –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å—Ç–µ–∫–ª–æ!")
        user_progress[user_id] += 1
        if user_progress[user_id] < len(questions):
            await send_question(update, context, user_id)
        else:
            await send_results(update, user_id)


async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    index = user_progress.get(user_id, 0)

    if index >= len(questions):
        return

    if user_id in user_timers:
        user_timers[user_id].cancel()
        del user_timers[user_id]

    question_data = questions[index]
    selected_option = int(query.data)
    correct_option = question_data["correct"]

    if selected_option == correct_option:
        reply_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        user_scores[user_id]["correct"] += 1
    else:
        reply_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['options'][correct_option]}"
        user_scores[user_id]["incorrect"] += 1

    await query.answer()
    await query.edit_message_text(text=f"{question_data['question']}\n\n{reply_text}")
    user_progress[user_id] += 1

    if user_progress[user_id] < len(questions):
        await send_question(update, context, user_id)
    else:
        await send_results(update, user_id)


async def send_results(update: Update, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    user_username = user_scores[user_id]["username"]
    correct = user_scores[user_id]["correct"]
    incorrect = user_scores[user_id]["incorrect"]
    elapsed_time = time.time() - user_scores[user_id]["start_time"]

    leaderboard.append({"username": user_username, "score": correct, "time": elapsed_time})
    leaderboard.sort(key=lambda x: (-x["score"], x["time"]))
    top_10 = leaderboard[:10]
    leaderboard_text = "\n".join(
        [f"{i + 1}. {user['username']} - {user['score']} –±–∞–ª–ª–æ–≤ ({user['time']:.2f} —Å–µ–∫)" for i, user in
         enumerate(top_10)])

    result_text = (
        f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\nüë§ –õ–æ–≥–∏–Ω: {user_username}\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}\n"
        f"‚è≥ –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫\n\nüèÜ –¢–û–ü-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{leaderboard_text}")
    await update.effective_message.reply_text(result_text)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
